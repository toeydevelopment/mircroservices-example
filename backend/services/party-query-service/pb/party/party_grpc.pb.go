// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package party

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartyQueryServiceClient is the client API for PartyQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyQueryServiceClient interface {
	PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error)
}

type partyQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyQueryServiceClient(cc grpc.ClientConnInterface) PartyQueryServiceClient {
	return &partyQueryServiceClient{cc}
}

func (c *partyQueryServiceClient) PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error) {
	out := new(PartyByIDResponse)
	err := c.cc.Invoke(ctx, "/PartyQueryService/PartyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyQueryServiceServer is the server API for PartyQueryService service.
// All implementations must embed UnimplementedPartyQueryServiceServer
// for forward compatibility
type PartyQueryServiceServer interface {
	PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error)
	mustEmbedUnimplementedPartyQueryServiceServer()
}

// UnimplementedPartyQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartyQueryServiceServer struct {
}

func (UnimplementedPartyQueryServiceServer) PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyByID not implemented")
}
func (UnimplementedPartyQueryServiceServer) mustEmbedUnimplementedPartyQueryServiceServer() {}

// UnsafePartyQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyQueryServiceServer will
// result in compilation errors.
type UnsafePartyQueryServiceServer interface {
	mustEmbedUnimplementedPartyQueryServiceServer()
}

func RegisterPartyQueryServiceServer(s grpc.ServiceRegistrar, srv PartyQueryServiceServer) {
	s.RegisterService(&PartyQueryService_ServiceDesc, srv)
}

func _PartyQueryService_PartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyQueryServiceServer).PartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PartyQueryService/PartyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyQueryServiceServer).PartyByID(ctx, req.(*PartyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyQueryService_ServiceDesc is the grpc.ServiceDesc for PartyQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PartyQueryService",
	HandlerType: (*PartyQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PartyByID",
			Handler:    _PartyQueryService_PartyByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/party.proto",
}
